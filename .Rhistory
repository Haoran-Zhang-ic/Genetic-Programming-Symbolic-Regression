.square = 2
x = 1
x = c(1,2,3)
y = c(2,3,4)
x+y
(x+y)^2
.square = function{x,y}{
.square = function(x,y){
return((x+y)^2)
}
library(gpsr)
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor(list("add","sub","div","mul",squared_sum))
gpsr_es = SymbolicRegressor$new(list("add","sub","div","mul",squared_sum))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
.functions_map
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = c("add","div")
)
# fit the target
sr$fit(data, y)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = c("add","div",squared_sum)
)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
library(gpsr)
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
devtools::load_all()
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
devtools::load_all()
library(gpsr)
## basic example code
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# our target formula: X1^2 - X2^2 - X1 - 1
y <- data[, 1]**2 - data[, 2]**2 - data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = list("add","div",squared_sum)
)
# fit the target
sr$fit(data, y)
library(gpsr)
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
devtools::check()
devtools::load_all()
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
library(gpsr)
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
library(gpsr)
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
devtools::install()
library(gpsr)
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
library(gpsr)
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
c(1:0)
devtools::load_all()
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
param = 0
for (i in c(1:param)){
print(i)
}
devtools::load_all()
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
devtools::install()
library(gpsr)
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
library(gpsr)
.squared_sum = function(x,y){
return((x+y)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
gpsr_es$function_set
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
# check function names
for (i in 1:length(gpsr_es$function_set)){
print(gpsr_es$function_set[[i]]$name)
}
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name)
}
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.squared_sum = function(a,b){
return((a+b)^2)
}
squared_sum = make_function(
fun = .squared_sum,
arity = 2,
name = "squared_sum")
# test the function
squared_sum$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",squared_sum))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.perf_sqr = function(a,b){
return((a+b)^2)
}
.perf_sqr = function(a,b){
return((a+b)^2)
}
perf_sqr = make_function(
fun = .perf_sqr,
arity = 2,
name = "perfect_square")
# test the function
perf_sqr$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",perf_sqr))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.perf_sqr_plus = function(x,y,a,b){
return(a*(x+y)^2 + b)
}
perf_sqr_plus = make_function(
fun = .perf_sqr_plus,
arity = 4,
name = "perfect_square_plus",
param = 2,
param_pool = list(c(1,2,3),c(2,3,4)))
# test the function
perf_sqr$fun(c(1,2,3),c(2,3,4))
# test the function
perf_sqr_plus$fun(c(1,2,3),c(2,3,4),2,3)
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",perf_sqr))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.rmse = function(y,y_hat){
return(sqrt(mean((y-y_hat)^2)))
}
# check rmse function
.rmse(c(1,2,3),c(2,3,4))
rmse = make_fitness(function_ = .rmse, greater_is_better = FALSE)
# check rmse function
rmse$function_(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
devtools::install()
library(gpsr)
.perf_sqr = function(a,b){
return((a+b)^2)
}
perf_sqr = make_function(
fun = .perf_sqr,
arity = 2,
name = "perfect_square")
# test the function
perf_sqr$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",perf_sqr))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.perf_sqr_plus = function(x,y,a,b){
return(a*(x+y)^2 + b)
}
.perf_sqr_plus = function(x,y,a,b){
return(a*(x+y)^2 + b)
}
perf_sqr_plus = make_function(
fun = .perf_sqr_plus,
arity = 4,
name = "perfect_square_plus",
param = 2,
param_pool = list(c(1,2,3),c(2,3,4)))
# test the function
perf_sqr_plus$fun(c(1,2,3),c(2,3,4),2,3)
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.rmse = function(y,y_hat){
return(sqrt(mean((y-y_hat)^2)))
}
rmse = make_fitness(function_ = .rmse, greater_is_better = FALSE)
# check rmse function
rmse$function_(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
gpsr_es$metric
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
gpsr_es$metric$function_
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
gpsr_es$metric
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
print(gpsr_es$metric)
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
print(gpsr_es$metric$function_)
gpsr_es = SymbolicRegressor$new(
function_set = list("add","sub","div","mul",perf_sqr,perf_sqr_plus),
metric = rmse)
gpsr_es$metric
devtools::install_github("Haoran-Zhang-ic/Genetic-Programming-Symbolic-Regression")
devtools::check()
devtools::document()
devtools::load_all()
set.seed(0)
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
y <- data[, 1]**2 - data[, 2]**2 + data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 20,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001
)
sr$fit(data, y)
devtools::load_all()
gpsr
set.seed(0)
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
y <- data[, 1]**2 - data[, 2]**2 + data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 20,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001
)
sr$fit(data, y)
devtools::check()
devtools::load_all()
set.seed(0)
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
y <- data[, 1]**2 - data[, 2]**2 + data[, 1] - 1
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 20,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001
)
sr$fit(data, y)
sr$best_program$tree_expression(
)
?SymbolicRegressor
devtools::check()
devtools::build_vignettes()
devtools::document()
remove.packages("gpsr")
library(gpsr)
devtools::check()
devtools::install()
devtools::check()
