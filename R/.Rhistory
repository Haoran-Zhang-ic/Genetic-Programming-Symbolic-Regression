devtools::load_all()
library(gpsr)
.perf_sqr = function(a,b){
return((a+b)^2)
}
perf_sqr = make_function(
fun = .perf_sqr,
arity = 2,
name = "perfect_square")
# test the function
perf_sqr$fun(c(1,2,3),c(2,3,4))
gpsr_es = SymbolicRegressor$new(function_set = list("add","sub","div","mul",perf_sqr))
# check function names
for (i in 1:length(gpsr_es$function_set)){
cat(gpsr_es$function_set[[i]]$name," ")
}
.perf_sqr_plus = function(x,y,a,b){
return(a*(x+y)^2 + b)
}
perf_sqr_plus = make_function(
fun = .perf_sqr_plus,
arity = 4,
name = "perfect_square_plus",
param = 2,
param_pool = list(c('1','2','3'),c('2','3','4')))
devtools::load_all()
perf_sqr_plus = make_function(
fun = .perf_sqr_plus,
arity = 4,
name = "perfect_square_plus",
param = 2,
param_pool = list(c('1','2','3'),c('2','3','4')))
# test the function
# note that the character param would be automatically
# transform to numeric in our algorithm
perf_sqr_plus$fun(c(1,2,3),c(2,3,4),as.numeric('2'),as.numeric('3'))
devtools::check()
test_that("give param_pool type error", {
expect_error(make_function(fun = function(x,a){return(a*x[1:3])},
arity = 2,
param = 1,
param_pool = list(c(1,2,3)),
name = "test function"))
})
devtools::check()
my_function <- function(x, a, b) a * x^b
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
my_customized_function$fun(5, as.numeric('2'), as,numeric('5'))
my_customized_function$fun(1,2,3)
devtools::check()
as.numeric('x')
as.numeric('x1')
class(as.numeric('x1'))
#' my_customized_function <- make_function(
#'   fun = my_function,
#'   name = "My first function",
#'   arity = 3,
#'   param = 2,
#'   param_pool = list(c('x1', '2', '3'), c('4', '5', '6'))
#' )
#' my_function <- function(x, a, b) a * x^b
#' my_customized_function <- make_function(
#'   fun = my_function,
#'   name = "My first function",
#'   arity = 3,
#'   param = 2,
#'   param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
#' )
#' # check the function return the correct number
#' my_customized_function$fun(5, as.numeric('2'), as.numeric('5'))
make_function <- function(fun, arity, name, param = 0, param_pool = list()) {
# Making a function for use in programs
# Parameters ---------------------------------------------------------
# fun : function
#   A function to operate the computation in execute algorithm.
# arity : numeric
#   The number of arguments that the function takes.
# name : character
#   The name of the function.
# param : numeric
#   The number of arguments that the function takes and varied during the training.
# param_pool : numeric
#   The possible values the param can take. character.
# Returns ------------------------------------------------------------
# function_list : list
#   The list return includes the function itself and the attributes of it.
if (!is.function(fun)) {
stop(paste("The fun parameter expects function value. Got type:", class(fun)))
}
if (!is.numeric(arity)) {
stop(paste("The arity parameter expects numeric value. Got type:", class(arity)))
} else if (length(arity) > 1) {
stop("Got multiple arity parameters.")
} else if (is.na(arity) | arity < 0) {
stop("The arity parameter is NA or negative arity.")
}
if (!is.numeric(param)) {
stop(paste("The param parameter expects numeric value. Got type:", class(param)))
} else if (length(param) > 1) {
stop("Got multiple param parameters.")
} else if (is.na(param) | param < 0) {
stop("The param parameter is NA or negative param.")
}
if (!is.list(param_pool)) {
stop(paste("The param_pool parameter expects list value. Got type:", class(param_pool)))
} else if (length(param_pool) != param) {
stop(paste("The number of param pools is not consistent with the number of params. Got params:", param, "Got param pools:", length(param_pool)))
}
for (i in param_pool) {
if (!is.character(i)) {
stop(paste("The param pool expects character value. Got type:", class(i)))
}
}
for (i in param_pool) {
if (!is.numeric(as.numeric(i)) || is.na(as.numeric(i))) {
stop(paste("The param pool expects Non-NA numeric after transform the character value. Got :", as.numeric(i)))
}
}
if (!is.character(name)) {
stop(paste("The name parameter expects character value. Got type:", class(name)))
} else if (length(name) > 1) {
stop("Got multiple name parameters.")
}
# check if function return the same shape as input vectors
sample_feature <- arity - param
sample_terminals <- list()
for (i in c(1:sample_feature)) {
sample_terminals[[i]] <- rep(1, 10)
}
if (param > 0) {
for (i in c(1:param)) {
sample_terminals[[length(sample_terminals) + 1]] <- as.numeric(sample(param_pool[[i]], size = 1))
}
}
sample_intermediate_result <- do.call(fun, sample_terminals)
if (length(sample_intermediate_result) != 10) {
stop("supplied function does not return same shape as input vectors.")
}
# check if function is closed under zero input
sample_terminals <- list()
for (i in c(1:sample_feature)) {
sample_terminals[[i]] <- rep(0, 10)
}
if (param > 0) {
for (i in c(1:param)) {
sample_terminals[[length(sample_terminals) + 1]] <- as.numeric(sample(param_pool[[i]], size = 1))
}
}
sample_intermediate_result <- do.call(fun, sample_terminals)
if (sum(is.infinite(sample_intermediate_result)) > 0) {
stop("supplied function does not have closure against zero vectors.")
}
# check if function is closed under negative input
sample_terminals <- list()
for (i in c(1:sample_feature)) {
sample_terminals[[i]] <- rep(-1, 10)
}
if (param > 0) {
for (i in c(1:param)) {
sample_terminals[[length(sample_terminals) + 1]] <- as.numeric(sample(param_pool[[i]], size = 1))
}
}
sample_intermediate_result <- do.call(fun, sample_terminals)
if (sum(is.infinite(sample_intermediate_result)) > 0) {
stop("supplied function does not have closure against negative vectors.")
}
function_list <- list(fun = fun, arity = arity, param = param, param_pool = param_pool, name = name)
return(function_list)
}
#' my_customized_function <- make_function(
#'   fun = my_function,
#'   name = "My first function",
#'   arity = 3,
#'   param = 2,
#'   param_pool = list(c('x1', '2', '3'), c('4', '5', '6'))
#' )
#' my_customized_function <- make_function(
#'   fun = my_function,
#'   name = "My first function",
#'   arity = 3,
#'   param = 2,
#'   param_pool = list(c('x1', 'x2', 'x3'), c('4', '5', '6'))
#' )
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c(1,2,3),c(2,3,4))
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('x1',2,3),c(2,3,4))
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('x', '2', '3'), c('4', '5', '6'))
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
as.numeric(c('1','2','3'))
c('1','2','3')
c('1','2','x')
as.numeric(c('1','2','x'))
is.na(as.numeric(c('1','2','x')))
sum(is.na(as.numeric(c('1','2','x'))))
.functions_map <- list(
add = list(fun = function(x, y) x + y, arity = 2, param = 0, param_pool = list(), name = "add"),
sub = list(fun = function(x, y) x - y, arity = 2, param = 0, param_pool = list(), name = "sub"),
mul = list(fun = function(x, y) x * y, arity = 2, param = 0, param_pool = list(), name = "mul"),
div = list(fun = function(x, y) ifelse(is.infinite(x / y), 1, x / y), arity = 2, param = 0, param_pool = list(), name = "div")
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
.functions_map <- list(
add = list(fun = function(x, y) x + y, arity = 2, param = 0, param_pool = list(), name = "add"),
sub = list(fun = function(x, y) x - y, arity = 2, param = 0, param_pool = list(), name = "sub"),
mul = list(fun = function(x, y) x * y, arity = 2, param = 0, param_pool = list(), name = "mul"),
div = list(fun = function(x, y) ifelse(is.infinite(x / y), 1, x / y), arity = 2, param = 0, param_pool = list(), name = "div")
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
.functions_map <- list(
add = list(fun = function(x, y) x + y, arity = 2, param = 0, param_pool = list(), name = "add"),
sub = list(fun = function(x, y) x - y, arity = 2, param = 0, param_pool = list(), name = "sub"),
mul = list(fun = function(x, y) x * y, arity = 2, param = 0, param_pool = list(), name = "mul"),
div = list(fun = function(x, y) ifelse(is.infinite(x / y), 1, x / y), arity = 2, param = 0, param_pool = list(), name = "div")
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
.functions_map <- list(
add = list(fun = function(x, y) x + y, arity = 2, param = 0, param_pool = list(), name = "add"),
sub = list(fun = function(x, y) x - y, arity = 2, param = 0, param_pool = list(), name = "sub"),
mul = list(fun = function(x, y) x * y, arity = 2, param = 0, param_pool = list(), name = "mul"),
div = list(fun = function(x, y) ifelse(is.infinite(x / y), 1, x / y), arity = 2, param = 0, param_pool = list(), name = "div")
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
devtools::load_all()
my_function <- function(x, a, b) a * x^b
.functions_map <- list(
add = list(fun = function(x, y) x + y, arity = 2, param = 0, param_pool = list(), name = "add"),
sub = list(fun = function(x, y) x - y, arity = 2, param = 0, param_pool = list(), name = "sub"),
mul = list(fun = function(x, y) x * y, arity = 2, param = 0, param_pool = list(), name = "mul"),
div = list(fun = function(x, y) ifelse(is.infinite(x / y), 1, x / y), arity = 2, param = 0, param_pool = list(), name = "div")
)
my_function <- function(x, a, b) a * x^b
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
devtools::load_all()
my_function <- function(x, a, b) a * x^b
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('1', '2', '3'), c('4', '5', '6'))
)
my_customized_function <- make_function(
fun = my_function,
name = "My first function",
arity = 3,
param = 2,
param_pool = list(c('x1', '2', '3'), c('4', '5', '6'))
)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
test_that("give param_pool type2 error", {
expect_error(make_function(fun = function(x,a){return(a*x[1:3])},
arity = 2,
param = 1,
param_pool = list(c('x1','2','3')),
name = "test function"))
})
devtools::check()
devtools::document()
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# set a parameter changeable function shift
.shift = function(x,a){
return(c(rep(1,a),x[-c((length(x) - a + 1):length(x))]))
}
shift = make_function(
fun = .shift,
arity = 2,
name = "shift",
param = 1,
param_pool = list(c('2','3','4')))
# define our target: shift(X1,3) + shift(X2,3) - X1 - X2
y <- .shift(data[,1],3) + .shift(data[,2],3) - data[,1] - data[,2]
# set our function set
my_function_set = list("add","sub","div","mul",shift)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = my_function_set,
metric = 'mse',
const_range = NULL
)
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# set a parameter changeable function shift
.shift = function(x,a){
return(c(rep(1,a),x[-c((length(x) - a + 1):length(x))]))
}
shift = make_function(
fun = .shift,
arity = 2,
name = "shift",
param = 1,
param_pool = list(c('2','3','4')))
# define our target: shift(X1,3) + shift(X2,3) - X1 - X2
y <- .shift(data[,1],3) + .shift(data[,2],3) - data[,1] - data[,2]
# set our function set
my_function_set = list("add","sub","div","mul",shift)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = my_function_set,
metric = 'mse',
const_range = NULL
)
# fit the target
sr$fit(data, y)
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# set a parameter changeable function shift
.shift = function(x,a){
print(a)
return(c(rep(1,a),x[-c((length(x) - a + 1):length(x))]))
}
shift = make_function(
fun = .shift,
arity = 2,
name = "shift",
param = 1,
param_pool = list(c('2','3','4')))
# define our target: shift(X1,3) + shift(X2,3) - X1 - X2
y <- .shift(data[,1],3) + .shift(data[,2],3) - data[,1] - data[,2]
# set our function set
my_function_set = list("add","sub","div","mul",shift)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = my_function_set,
metric = 'mse',
const_range = NULL
)
# fit the target
sr$fit(data, y)
devtools::load_all()
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# set a parameter changeable function shift
.shift = function(x,a){
print(a)
return(c(rep(1,a),x[-c((length(x) - a + 1):length(x))]))
}
shift = make_function(
fun = .shift,
arity = 2,
name = "shift",
param = 1,
param_pool = list(c('2','3','4')))
# define our target: shift(X1,3) + shift(X2,3) - X1 - X2
y <- .shift(data[,1],3) + .shift(data[,2],3) - data[,1] - data[,2]
# set our function set
my_function_set = list("add","sub","div","mul",shift)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = my_function_set,
metric = 'mse',
const_range = NULL
)
# fit the target
sr$fit(data, y)
# find the best program
paste("Best program:",sr$best_program$tree_expression())
set.seed(0)
# randomly generate samples
data <- matrix(runif(100, -1, 1), nrow = 50, ncol = 2)
# set a parameter changeable function shift
.shift = function(x,a){
return(c(rep(1,a),x[-c((length(x) - a + 1):length(x))]))
}
shift = make_function(
fun = .shift,
arity = 2,
name = "shift",
param = 1,
param_pool = list(c('2','3','4')))
# define our target: shift(X1,3) + shift(X2,3) - X1 - X2
y <- .shift(data[,1],3) + .shift(data[,2],3) - data[,1] - data[,2]
# set our function set
my_function_set = list("add","sub","div","mul",shift)
sr <- SymbolicRegressor$new(
pop_size = 2000,
generations = 10,
p_crossover = 0.7,
p_subtree_mutation = 0.1,
p_hoist_mutation = 0.05,
p_point_mutation = 0.1,
p_point_replace = 0.1,
parsimony_coefficient = 0.001,
function_set = my_function_set,
metric = 'mse',
const_range = NULL
)
# fit the target
sr$fit(data, y)
# find the best program
paste("Best program:",sr$best_program$tree_expression())
