% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/program.R
\name{Program}
\alias{Program}
\title{Program class for symbolic regression using genetic programming.}
\description{
This is the underlying data-structure used by the public classes in the genetic programming.
}
\details{
Object used by the SymbolicRegressor.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{init_depth}}{The range of tree depths for the initial population of naive formulas.}

\item{\code{init_method}}{The method define how the tree grows.}

\item{\code{function_set}}{A list of valid functions in list form to use in the program.}

\item{\code{const_range}}{The range of constant can take for the program.}

\item{\code{metric}}{The raw fitness metric.}

\item{\code{p_point_replace}}{The probability that any given node will be mutated during point mutation.}

\item{\code{parsimony_coefficient}}{The constant penalizes large programs by adjusting their fitness to be less favorable for selection.}

\item{\code{feature_names}}{The vector of names of features of input data.}

\item{\code{program}}{The programs.}

\item{\code{raw_fitness_}}{The raw fitness of the program.}

\item{\code{fitness_}}{The fitness of the program after penalized.
Initialize method}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Program-new}{\code{Program$new()}}
\item \href{#method-Program-build_program}{\code{Program$build_program()}}
\item \href{#method-Program-execute}{\code{Program$execute()}}
\item \href{#method-Program-raw_fitness}{\code{Program$raw_fitness()}}
\item \href{#method-Program-fitness}{\code{Program$fitness()}}
\item \href{#method-Program-get_subtree}{\code{Program$get_subtree()}}
\item \href{#method-Program-crossover}{\code{Program$crossover()}}
\item \href{#method-Program-subtree_mutation}{\code{Program$subtree_mutation()}}
\item \href{#method-Program-hoist_mutation}{\code{Program$hoist_mutation()}}
\item \href{#method-Program-point_mutation}{\code{Program$point_mutation()}}
\item \href{#method-Program-tree_expression}{\code{Program$tree_expression()}}
\item \href{#method-Program-depth}{\code{Program$depth()}}
\item \href{#method-Program-clone}{\code{Program$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-new"></a>}}
\if{latex}{\out{\hypertarget{method-Program-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$new(
  function_set = NULL,
  init_depth = NULL,
  init_method = NULL,
  feature_names = NULL,
  const_range = NULL,
  metric = NULL,
  p_point_replace = NULL,
  parsimony_coefficient = NULL,
  program = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{function_set}}{The field function_set}

\item{\code{init_depth}}{The field init_depth}

\item{\code{init_method}}{The field init_method}

\item{\code{feature_names}}{The field feature_names}

\item{\code{const_range}}{The field const_range}

\item{\code{metric}}{The field metric}

\item{\code{p_point_replace}}{The field p_point_replace}

\item{\code{parsimony_coefficient}}{The field parsimony_coefficient}

\item{\code{program}}{The field program}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The program object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-build_program"></a>}}
\if{latex}{\out{\hypertarget{method-Program-build_program}{}}}
\subsection{Method \code{build_program()}}{
Build a naive program randomly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$build_program()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a raw program in list form.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-execute"></a>}}
\if{latex}{\out{\hypertarget{method-Program-execute}{}}}
\subsection{Method \code{execute()}}{
Execute the program according to X
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$execute(X)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{X}}{Training vectors.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The result of executing the program on X.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-raw_fitness"></a>}}
\if{latex}{\out{\hypertarget{method-Program-raw_fitness}{}}}
\subsection{Method \code{raw_fitness()}}{
Evaluate the raw fitness of the program according to X, y
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$raw_fitness(X, y)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{X}}{Training vectors.}

\item{\code{y}}{Target values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The raw fitness of the program.
Fitness method
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-fitness"></a>}}
\if{latex}{\out{\hypertarget{method-Program-fitness}{}}}
\subsection{Method \code{fitness()}}{
Evaluate the penalized fitness of the program according to X, y.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$fitness()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The penalized fitness of the program.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-get_subtree"></a>}}
\if{latex}{\out{\hypertarget{method-Program-get_subtree}{}}}
\subsection{Method \code{get_subtree()}}{
Get a random subtree from the program.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$get_subtree(program = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{program}}{The flattened tree representation of the program. If None, the embedded tree in the object will be used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The indices of the start and end of the random subtree.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-crossover"></a>}}
\if{latex}{\out{\hypertarget{method-Program-crossover}{}}}
\subsection{Method \code{crossover()}}{
Perform the crossover genetic operation on the program.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$crossover(donor)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{donor}}{The flattened tree representation of the donor program.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The flattened tree representation of the program.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-subtree_mutation"></a>}}
\if{latex}{\out{\hypertarget{method-Program-subtree_mutation}{}}}
\subsection{Method \code{subtree_mutation()}}{
Perform the subtree mutation operation on the program.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$subtree_mutation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The flattened tree representation of the program.
The hoist mutation method.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-hoist_mutation"></a>}}
\if{latex}{\out{\hypertarget{method-Program-hoist_mutation}{}}}
\subsection{Method \code{hoist_mutation()}}{
Perform the hoist mutation operation on the program.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$hoist_mutation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The flattened tree representation of the program.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-point_mutation"></a>}}
\if{latex}{\out{\hypertarget{method-Program-point_mutation}{}}}
\subsection{Method \code{point_mutation()}}{
Perform the point mutation operation on the program.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$point_mutation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The flattened tree representation of the program.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-tree_expression"></a>}}
\if{latex}{\out{\hypertarget{method-Program-tree_expression}{}}}
\subsection{Method \code{tree_expression()}}{
Generate the readable tree expression of program
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$tree_expression()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The characters of a tree.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-depth"></a>}}
\if{latex}{\out{\hypertarget{method-Program-depth}{}}}
\subsection{Method \code{depth()}}{
Compute the depth of a tree.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$depth()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The depth of a tree.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Program-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Program-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Program$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
